Lightning v0.1.1 API Specifications
====================================

We highly recommend reading :doc:`../data_structures/v0.1.1` before diving into
this API. Note that RESTful API GET queries do not allow request data.


Lightning Server Namespace
---------------------------
..
  Though tile positions include their tag set integer, they make little intuitive
  sense when compared with tile positions from another tag set. Thus the
  partitioning of the tile library namespace.

  We want to allow a user to iterate over all tile positions and tile variants
  without needing to iterate over the paths.

::

  /status : returns the API version running on the server
  /tile-library
    /tag-sets : returns the tag set version information for all versions
                supported by this Lighting server instance.
      /{tag-set-identifier} : given the tag set version identifier, returns
                              information about that tag set.
        /paths : given the tag set version integer, returns the paths in that
                 tag set.
          /{path-int} : given the tag set version identifier and the path integer,
                        returns information about that path.
        /tile-positions : given the tag set version identifier, returns the tile
                          positions in that tag set.
          /{tile-position-id} : given the tag set version identifier and tile
                                position identifier, returns information about
                                that tile position.
            /locus : given the tag set version identifier, tile position identifier,
                     and optional query parameters containing assembly information,
                     returns locus information about the tile position.
        /tile-variants : given a tag set version identifier, returns the tile
                         variants in that tag set in this Lightning server instance.
          /{tile-variant-id} : given the tag set version identifier and tile variant
                               identifier, returns details about the tile variant.
            /locus : given the tag set version identifier, tile variant identifier,
                     and optional query parameters containing assembly information,
                     returns locus information about the tile variant.
            /subsequence: given the tag set version identifier, tile variant
                          identifier, and query parameters containing locus
                          information, returns the subsequence of the tile variant
            /annotations: given the tag set version identifier and tile variant
                          identifier, returns the annotation identifiers applying
                          to that tile variant.
  /annotations : returns a list of annotation identifiers loaded into the Lightning
                 instance.
    /{annotation-id} : given an annotation id, returns the tile variants associated
                       with that annotation.
  /callsets : returns a list of all genome names, termed callsets, loaded into this
              Lightning server instance.
    /{callset-name} : given the callset name, returns details about the callset.
      /gvcf : given the callset name and locus query parameters, returns a list
              of gVCF lines.
      /vcf : given the callset name and locus query parameters, returns a list of
             VCF lines.
      /tile-variants : given the callset name and tile position query parameters,
                       returns the tile variants the callset has at the given tile
                       position.
  /assemblies : returns the available assemblies
    /{assembly-id} : returns the details about the assembly, including a list of
                     loaded loci (valid locations) on the Lightning server instance.
  /searches : returns a list of searches that have been performed
    /{search-id} : returns the specific search and the answer of the search

GET /status
------------
    Returns the status of the server, including the api-version running on the server,
    possibly the current load level, etc. Does not require any query parameters.

    **Response body:** ::

        {
          'api-version': <int>[.<int>]*,
          ...
        }

GET /tile-library/tag-sets
----------------------------
    Probably will be unchanged from v0.1.0.

GET /tile-library/tag-sets/{tag-set-identifier}
------------------------------------------------
    Probably will be unchanged from v0.1.0.

GET /tile-library/tag-sets/{tag-set-identifier}/paths
-------------------------------------------------------
    Probably will be unchanged from v0.1.0.

GET /tile-library/tag-sets/{tag-set-identifier}/paths/{path-int}
-----------------------------------------------------------------
    Probably will be unchanged from v0.1.0.

GET /tile-library/tag-sets/{tag-set-identifier}/tile-positions
---------------------------------------------------------------
    Might be unchanged from v0.1.0. Might support query parameters filtering on
    information about the tile (like its path).

GET /tile-library/tag-sets/{tag-set-identifier}/tile-positions/{tile-position-id}
----------------------------------------------------------------------------------
    Probably will be unchanged from v0.1.0.

GET /tile-library/tag-sets/{tag-set-identifier}/tile-positions/{tile-position-id}/locus
----------------------------------------------------------------------------------------
    Probably will be unchanged from v0.1.0.

GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants
---------------------------------------------------------------
    Might be unchanged from v0.1.0. Might support query parameters filtering on
    information about the tile variant (like its path).

GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants/{tile-variant-id}
--------------------------------------------------------------------------------
    Specifications will probably will be unchanged from v0.1.0. But the response
    will change because the data structure changes.

GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants/{tile-variant-id}/locus
--------------------------------------------------------------------------------------
    Probably will be unchanged from v0.1.0. Will want a batch request to view
    multiple tile variants at a time.

GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants/{tile-variant-id}/subsequence
--------------------------------------------------------------------------------------------
    Probably will be unchanged from v0.1.0. Will want a batch request to view
    multiple tile variants at a time.

GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants/{tile-variant-id}/annotations
--------------------------------------------------------------------------------------------
    Probably will be unchanged from v0.1.0. Will want a batch request to view
    multiple tile variants at a time.

GET /annotiles
----------------
    Probably will be unchanged from v0.1.0.

GET /annotiles/{annotation-id}
-------------------------------
    Probably will be unchanged from v0.1.0.

GET /callsets
--------------
    Probably will be unchanged from v0.1.0.

POST /callsets
--------------
    Creates a callset (called genomes) in this Lightning server instance. Returns
    an Arvados UUID pointing to the pipeline instance adding the callset. The
    callset will appear on the server once the pipeline finishes successfully.

    **Request body:** ::

        {
          'callset-name': <string>,
          'callset-format': <string>,
          'callset-collection-pdh': <string>
        }

    **Response body:** ::

        <ArvadosUUID>

GET /callsets/{callset-name}
-----------------------------
    Probably will be unchanged from v0.1.0. Unlikely to include phenotypic
    query options.

GET /callsets/{callset-name}/gvcf-header
-----------------------------------------
    Functionality will probably remain the same as v0.1.0. Underlying specifications
    will change with data structure.

GET /callsets/{callset-name}/gvcf
-----------------------------------
    Functionality will probably remain the same as v0.1.0. Underlying specifications
    will change with data structure. Might want to implement a batch query for
    multiple loci. Being able to name the locus would also be helpful.

GET /callsets/{callset-name}/vcf-header
-----------------------------------------
    Functionality will probably remain the same as v0.1.0. Underlying specifications
    will change with data structure.

GET /callsets/{callset-name}/vcf
-----------------------------------
    Functionality will probably remain the same as v0.1.0. Underlying specifications
    will change with data structure. Might want to implement a batch query for
    multiple loci. Being able to name the locus would also be helpful.

GET /callsets/{callset-name}/tile-variants
-------------------------------------------
    Might be unchanged from v0.1.0. Might want to include phase group information.
    Will probably want to implement a batch query for getting tile variants for
    multiple callsets at once.

GET /assemblies
-----------------
    Probably will be unchanged from v0.1.0.

GET /assemblies/{assembly-id}
-------------------------------
    Probably will be unchanged from v0.1.0.

GET /searches/help
----------------------
    Probably will be unchanged from v0.1.0.

GET /searches
----------------------
    Probably will be unchanged from v0.1.0.

GET /searches/{search-id}
--------------------------
    Will be expanded to allow searching on both callsets and tile variants.

    Want to be able to find callsets with specific tile variants.

    Want to be able to find tile variants with specific qualities: REGEX on
    sequences, start tag, and/or end tag. Comparison on length, number of
    positions spanned, population frequency, population total. True/False check
    on whether the tile is at the start of a path or at the end of the path.

POST /searches
----------------------------------------
    Probably will be unchanged from v0.1.0.
