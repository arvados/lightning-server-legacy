Lightning v0.1.0 API Specifications
====================================

We highly recommend reading :doc:`../data_structures/v0.1.0` before diving into
this API. Certain parts of these API only support well-sequenced tile variants

Lightning Server Namespace
---------------------------

::

  /status : returns the API version running on the server
  /tile-library
    /tag-versions : returns the tag set version information for all versions
                    supported by the server.
    /{tag-set-int} : given the tag set version integer, returns a dictionary
                     keyed by path integer with a value of the number of steps
      /{path-int} : given the tag set version integer and the path integer, returns
                    a dictionary keyed by step integer with a value of the number
                    of variants
        /{step-int} : given the tag set version integer, path integer, and step
                      integers, returns a list of tuples:
                      (md5sum of sequence, frequency, total population size)
          /{variant-md5sum} : given the tag set version integer, path integer,
                              step integer, and the md5sum of the tile variant,
                              returns details about the tile variant
            /locus : given the tag set version integer, path integer, step integer,
                     and the md5sum of the tile variant, returns locus information
                     about the tile variant.
            /subsequence: given the tag set version integer, path integer, step
                          integer, the md5sum of the tile variant, and a request
                          containing locus information, returns the subsequence
                          of the tile variant
  /annotile
    /filters : returns valid filters
    /filter-annotations : given a request of tile variants and filters, returns
                          the annotations applying to those tile variants according
                          to the filters.
    /filter-tile-variants : given a request of annotation identifiers and filters,
                            returns the tile variants with those annotations that
                            satisfy the filters.
  /callsets : returns a list of all genome names
    /{callset-name} : returns details about the callset
      /gvcf : returns a list of gVCF lines, requires request containing locus or
              loci to return
      /vcf : returns a list of VCF lines, requires request containing locus or
             loci to return.
    /filters : returns valid filters
    /filter-phase-insensitive : returns a list of callsets matching filters,
                                accepts request containing filters and subsection
                                of the callsets to run query on.
    /filter-phase-sensitive : returns a dictionary of callsets mapped to the
                              integers of their phases matching filters, accepts
                              request containing filters and subsection of the
                              callsets to run query on.
    /tile-variants : returns tile variants for subsection of callsets over positions
                     given, requires request containing callsets and positions
  /assemblies : returns a list of loaded loci (valid locations) for all assemblies


GET /status
------------
    Returns the status of the server, which currently only is the API version the
    server is running.

    **Request body:** ::

        None

    **Response body:** ::

        {
          'api-version': <int>.<int>.<int>
        }

    **Example response:** ::

        { 'api-version' : 0.1.0 }


GET /tile-library/tag-versions
------------------------------
    Request used to get the mapping between the tag set integers and reproducible
    tag set identifiers that may be used by any server. Does not require a request
    body. Returns the tag set version integers (in base 16) on the server along
    with their unique identifiers. These identifiers are based on information
    about the tag set and the path dividers. Response body is of type
    :ref:`version-map-data-structure`.

    **Request body:** ::

        None

    **Response body:** ::

        <VersionMap>


    **Example response:** ::

        {
            0 : 'd87075c41962489cb9ce7d63da1d7841',
            1 : '047ae54fba97385716acd2c552fae763'
        }


GET /tile-library/{tag-set-int}
--------------------------------
    Request used to get information about specific tag set given the tag set
    integer (in base 16). Does not require a request body. Returns a dictionary
    with path and step information for the given tag set version integer.
    The returned dictionary contains keys that are path integers (in base 16),
    whose values are the number of steps (in base 16) in that path.

    **Request body:** ::

        None

    **Response body:** ::

        {
            <int> : <int>,
            <int> : <int>,
            ...
        }

    **Example response:** ::

        {
            000 : 1533,
            001 : 2d41,
            002 : 1bc8,
            ...
        }


GET /tile-library/{tag-set-int}/{path-int}
-------------------------------------------
    Request used to get information about a path given the path integer (in base
    16) and specific tag set integer (in base 16). Does not require a request
    body. Returns a dictionary with step information for the path. The returned
    dictionary contains keys that are step integers (in base 16), and a dictionary
    containing the number of total tile variants (in base **10**)
    and the number of well-sequenced tile variants (in base **10**) at that step.

    **Request body:** ::

        None

    **Response body:** ::

        {
            <int> : {
              'total': <int>,
              'well-sequenced': <int>
            },
            <int> : {
              'total': <int>,
              'well-sequenced': <int>
            },
            ...
        }

    **Example Response:** ::

        {
            0000 : {
              'total': 300,
              'well-sequenced': 17
            },
            0001 : {
              'total': 30,
              'well-sequenced': 17
            },
            ...
        }

GET /tile-library/{tag-set-int}/{path-int}/{step-int}
------------------------------------------------------
    Request used to get information about a step given the step integer (in
    base 16), the path integer (in base 16), and the tag set integer (in base
    16). Returns the information about a :ref:`tile-position-data-structure` as
    a dictionary. Keys include:

    * ``total-population``: the total number of genomes with a tile variant at
the total number of genomes with a tile variant at the given tile positions and a
list of the tile variants at that tile position. Each tile variant is returned as
a dictionary with the MD5 hash digest of its sequence, a shorter integer representing
the tile variant which is used by lantern, and the number of genomes that have that
tile variant.

**Request body:** ::

    None

**Response body:** ::

    {
        'total-population' : <int>,
        'tile-variants' : [
            (<string>, <int>, <int>),
            (<string>, <int>, <int>),
            ...
        ]
    }

.. todo::
    Example response

GET /tile-library/{version-int}/{path-int}/{step-int}/{variant-md5sum}
-----------------------------------------------------------------------
Returns the detail about a :ref:`tile-variant-data-structure`.

**Request body:** ::

    None

**Response body:**

    :ref:`tile-variant-detail-data-structure`


**Example response:** ::

    {
        'tag-length' : 24,
        'start-tag': '',
        'end-tag': 'tcagaatgtttggagggcggtacg',
        'is-start-of-path': true,
        'is-end-of-path': false,
        'sequence' : 'acnnagtagttttgccgctcgntaatcagaatgtttggagggcgnnnnn',
        'md5sum': '2e86a2a0dcf165173e1564ce416d2df0',
        'length': 49,
        'number-of-positions-spanned': 1,
        'population-frequency': 3,
        'population-total': 50
    }

.. todo::
    Fix example response


POST /tile-variants/loci
-------------------------
The only reason this is a POST is because the request arguments could be too big
to fit in the URL.

Requires a request body with a list of :ref:`tile-variant-data-structure`'s,
:ref:`tile-position-data-structure`'s, and/or :ref:`tile-position-range-data-structure`'s,
and a list of assemblies (as strings) to return loci for. If a
:ref:`tile-position-data-structure` is given, all variants at that position are
returned. If a :ref:`tile-position-range-data-structure` is given, all variants
for all positions in the range are returned.

Returns a dictionary of :ref:`tile-variant-data-structure` with a list of
:ref:`locus-data-structure`'s.

**Request body:** ::

    {
        'tile-variants' : [<TileVariant> or <TilePosition> or <TilePositionRange>, ... ],
        'assembly': [<assembly-name>, <assembly-name>, ... ]
    }

**Response body:** ::

    {
        <TileVariant> : [ <Locus>, <Locus>, ... ],
        <TileVariant> : [ <Locus>, <Locus>, ... ],
        ...
    }

**Example request body:** ::

    {
        'tile-variants': [ '0.0.1.d87075c41962489cb9ce7d63da1d7841'}],
        'assembly': ['hg19']
    }

**Example response body:** ::

    {
        '0.0.1.d87075c41962489cb9ce7d63da1d7841' : [ ['hg19', 'chr1', 0, 3000, 3248] ]
    }

GET /callsets
--------------
Returns a list of the names of the callsets held in this lightning server.


**Request body:** ::

    None

**Response body:** ::

    [<string>, <string>, ... ]


**Example response body:** ::

    ['human1-complete-genomics', 'human1-illumina', 'human2', 'assembly-hg19' ]

GET /callsets/{callset-name}
-----------------------------
Returns dictionary containing details about the callset. If the callset name is
the name of an assembly or reference, the key 'is-reference' is in the response
body. If the callset is a non-reference sequence, the keys will not include
'is-reference', but other keys indicating phenotype may be present.

**Request body:** ::

    None

**Reference/assembly response body:** ::

    {
        'name' : <string>,
        'is-reference': <string>
    }

**Non-reference callset response body:** ::

    {
        'name': <string>,
       <string> : <string>,
       <string> : <string>,
       ...
    }

**Example 1:** ::

    GET /callsets/assembly-hg19
    Response body: {
        'name' : 'assembly-hg19',
        'is-reference': 'hg19'
    }

**Example 2:** ::

    GET /callsets/human1-illumina
    Response body: {
        'name' : 'human1-illumina',
        'phases-known': 'false',
        'sex': 'female',
        'ethnicity': 'Caucasian'
    }

GET /callsets/{callset-name}/gvcf (acts like a POST)
-----------------------------------------------------
.. todo::
    Is this a POST or a GET? Stopped intensive editing here

Requires a request containing information about the loci to return. Returns a list
of gVCF lines for the callset at these loci.

**Request body:** ::

    {
        'loci' : [ <Locus>, <Locus>, ... ] OR { <string> : <Locus>, <string> : <Locus>, ... }
    }

**Response body:** ::

    {
        (<string>, <Locus>) OR <Locus> : [
            <gVCF-line>,
            <gVCF-line>,
            ...
        ],
        (<string>, <Locus>) OR <Locus> : [
            <gVCF-line>,
            <gVCF-line>,
            ...
        ],
        ...
    }

GET /callsets/{callset-name}/vcf (acts like a POST)
----------------------------------------------------
.. todo::
    Is this a POST or a GET? Stopped intensive editing here

Requires a request containing information about the loci to return. Returns a list
of VCF lines for the callset at these loci.

**Request body:** ::

    {
        'loci' : [ <Locus>, <Locus>, ... ] OR { <string> : <Locus>, <string> : <Locus>, ... },
    }

**Response body:** ::

    {
        (<string>, <Locus>) OR <Locus> : [
            <VCF-line>,
            <VCF-line>,
            ...
        ],
        (<string>, <Locus>) OR <Locus> : [
            <VCF-line>,
            <VCF-line>,
            ...
        ],
        ...
    }

GET /callsets/filters
----------------------
Returns the filters the lightning server supports and the options available for
each filter (options not shown for filter 'tile-variants', but key 'tile-variants'
is included for completeness). None of the filters can be named 'tile-variants',
'is-reference', or 'callsets'.

**Request body:** ::

    None

**Response body:** ::

    {
        'tile-variants' : [ ],
        'is-reference': [ <string>, <string>, ... ],
        <string> : [ <string>, <string>, ... ],
        <string> : [ <string>, <string>, ... ],
        ...
    }

**Example response body:** ::

    {
        'tile-variants' : [ ],
        'is-reference': [ 'hg19', 'hg38' ],
        'sex': [ 'male', 'female', 'other' ]
    }

POST /callsets/filter-phase-insensitive
----------------------------------------
Returns a list of callsets that match the request filters on at least one phase.
Besides the tile-variants logic, all filters are AND'd. If the value associated
with 'callsets' is an empty list, the query is done on all callsets in the
lightning server.

**Request body:** ::

    {
        'tile-variants-sat' : <TileVariantLogic>,
        'callsets' : [ <string>, <string>, ... ],
        'is-reference': [ <string>, <string>, ... ],
        <string> :  [ <string>, <string>, ...],
        <string> :  [ <string>, <string>, ...],
        ...
    }

**Response body:** ::

    [ <string>, <string>, ... ]

.. todo::
    example

POST /callsets/filter-phase-sensitive
--------------------------------------
Returns a dictionary of callsets with a list of phases that match the request
filters. Besides the tile-variants logic, all filters are AND'd. If the value
associated with 'callsets' is an empty list, the query is done on all callsets
in the lightning server.

**Request body:** ::

    {
        'tile-variants-sat' : <TileVariantLogic>,
        'callsets' : [ <string>, <string>, ... ],
        'is-reference': [ <string>, <string>, ... ],
        <string> :  [ <string>, <string>, ...],
        <string> :  [ <string>, <string>, ...],
        ...
    }

**Response body:** ::

    {
        <string> : {
            'phase-groups-known' : <boolean>,
            'phases': [ <int>, <int>, ... ]
        },
        <string> : {
            'phase-groups-known' : <boolean>,
            'phases' : [ <int>, <int>, ... ]
        },
        ...
    }

.. todo::
    example

POST /callsets/tile-variants
-----------------------------
Returns a dictionary of callsets with a list of variants for each phase. The
variants are returned only for the tile positions given by the tile-positions
list. If the value of 'tile-positions' is an empty list, all tile-variants are
returned.  If the value associated with 'callsets' is an empty list, the query
is done on all callsets in the lightning server. The only reason this is a POST
is because the request arguments could be too big to fit in the URL.

**Request body:** ::

    {
        'tile-positions': [ <TilePosition> or <TilePositionRange>,  ... ],
        'callsets': [ <string>, <string>, ... ]
    }

**Response body:** ::

    {
        <string>: {
            'phase-groups' : None OR [ <int>-<int>, <int>-<int>, ... ],
            'sequence' : [

                [ <TileVariant>, <TileVariant>, ... ],

                [ <TileVariant>, <TileVariant>, ... ],

                ...

            ]

        },
        <string>: {
            'phase-groups' : None OR [ <int>-<int>, <int>-<int>, ... ],
            'sequence' : [
                [ <TileVariant>, <TileVariant>, ... ],
                [ <TileVariant>, <TileVariant>, ... ],
                ...
            ],
        },
        ...
    }


**Example request body:** ::

    {
        'tile-positions': [ '0.0.1', '0.0.2' ],
        'callsets': ['assembly-hg19', 'human2' ]
    }

**Example response body:** ::

    {
        'assembly-hg19: {
            'phase-groups' : [ 0-2 ],
            'sequence' : [ [ '0.0.1.bab3...', '0.0.2.1f35...' ] ]
        },
        'human2: {
            'phase-groups' : None,
            'sequence': [
                [ '0.0.0.1afe...', '0.0.2.1f35...' ],
                [ '0.0.1.bab3...', '0.0.2.1f35...' ]
            ]
        }
    }

GET /assembly-loci
--------------------
Returns a list of loci in the server

**Request body:** ::

    None

**Response body:** ::

    [ <Locus>, <Locus>, ... ]

**Example response body:** ::

    [
        ['hg19', 'chr1', 0, 0, 249250620],
        ['hg19', 'chr2', 0, 0, 243199372],
        ...,
        ['hg38', 'chr1', 0, 0, 248956421],
        ...
    ]
