Batch Processing
=================

The API calls are excellent for one-off queries. However, many users may wish to
use these calls many times for many samples and/or over large parts of the genome.
To speed up these queries and reduce load on the server, Lightning supports batch
processing.

.. todo::
    Design and document batch processing

  /tile-variants
    /filter : returns information about the requested tile variants, accepts request
              containing a list of tile variants
    /loci : returns locus information about the requested tile variants, accepts
            request containing a list of tile variants

  /assemblies : returns a list of loaded loci (valid locations) for all assemblies
    /tiles : returns tile variants subsequences and list of positions touching the
             loci, requires request containing loci

POST /tile-variants/filter
---------------------------
The only reason this is a POST is because the request arguments could be too big
to fit in the URL.

Requires a request body with a dictionary of filters to apply and a list of
tile variants (:ref:`tile-variant-data-structure`), tile positions
(:ref:`tile-position-data-structure`), and/or ranges of tile positions
(:ref:`tile-position-range-data-structure`). If a tile position is given, all
variants at that position are evaluated against the filters. If a tile position
range is given, all variants for all positions in the range are evaluated against
the filters.

Returns a dictionary of (:ref:`tile-variant-data-structure`) as keys with
(:ref:`tile-variant-detail-data-structure`) as the values for the tile variants
in the tile library that satify all the filters.


**Request body:** ::

    {
        'tile-variants' : [<TileVariant> or <TilePosition> or <TilePositionRange>, ... ],
        'filter': {
            'sequence': <REGEX-string>,
            'start-tag': <REGEX-string>,
            'end-tag': <REGEX-string>,
            'length' : <CMP-tuple>,
            'number-of-positions-spanned': <CMP-tuple>,
            'population-frequency': <CMP-tuple>,
            'population-total' : <CMP-tuple>,
            'is-start-of-path': <boolean>,
            'is-end-of-path': <boolean>
        }
    }

**Response body:** ::

    {
        <TileVariant> : <TileVariantDetail>,
        <TileVariant> : <TileVariantDetail>,
        ...
    }

**Example request body:** ::

    { 'tile-variants': [ '0.0.1.d87075c41962489cb9ce7d63da1d7841'] }

**Example response body:** ::

    {
        '0.0.1.d87075c41962489cb9ce7d63da1d7841':
            {
                'tag-length': 24,
                'start-tag': 'acggcagtagttttgccgctcggt',
                'end-tag': 'tcagaatgtttggagggcggtacg',
                'is-start-of-path': false,
                'is-end-of-path': false,
                'sequence' : 'acggcagtagttttgccgctcgntaaatcagaatgtttggagggcgnnnnn',
                'md5sum': 'd87075c41962489cb9ce7d63da1d7841'
                'length': 51,
                'number-of-positions-spanned': 1,
                'population-frequency': 15,
                'population-total': 15,
            }
    }

.. todo::
    Fix example response

POST /tile-variants/loci
-------------------------
The only reason this is a POST is because the request arguments could be too big
to fit in the URL.

Requires a request body with a list of :ref:`tile-variant-data-structure`'s,
:ref:`tile-position-data-structure`'s, and/or :ref:`tile-position-range-data-structure`'s,
and a list of assemblies (as strings) to return loci for. If a
:ref:`tile-position-data-structure` is given, all variants at that position are
returned. If a :ref:`tile-position-range-data-structure` is given, all variants
for all positions in the range are returned.

Returns a dictionary of :ref:`tile-variant-data-structure` with a list of
:ref:`locus-data-structure`'s.

**Request body:** ::

    {
        'tile-variants' : [<TileVariant> or <TilePosition> or <TilePositionRange>, ... ],
        'assembly': [<assembly-name>, <assembly-name>, ... ]
    }

**Response body:** ::

    {
        <TileVariant> : [ <Locus>, <Locus>, ... ],
        <TileVariant> : [ <Locus>, <Locus>, ... ],
        ...
    }

**Example request body:** ::

    {
        'tile-variants': [ '0.0.1.d87075c41962489cb9ce7d63da1d7841'}],
        'assembly': ['hg19']
    }

**Example response body:** ::

    {
        '0.0.1.d87075c41962489cb9ce7d63da1d7841' : [ ['hg19', 'chr1', 0, 3000, 3248] ]
    }

POST /assembly-loci/tiles
--------------------------
Returns a list of tile-positions touching the given loci, a dictionary of
tile-variants touching those loci with the sequence of the tile variant, cut off
if appropriate, and the tag-length.

The only reason this is a POST is because the request arguments could be too big
to fit in the URL.

Examples for the INDEL behavior can be found at lightning-dev4.curoverse.com/pad/p/lightning-indel-behavior

**Request body:** ::

    [ <Locus>, <Locus>, ... ] OR { <string>: <Locus>, <string>: <Locus>, ... }

**Response body:** ::

    {
        'tile-positions':
            {
                (<string>, <Locus>) OR <Locus> : [ <TilePosition> OR <TilePositionRange>, <TilePosition> OR <TilePositionRange>, ... ],
                (<string>, <Locus>) OR <Locus> : [ <TilePosition> OR <TilePositionRange>, <TilePosition> OR <TilePositionRange>, ... ],
                ...
            },
        'tile-variants':
            {
                (<string>, <Locus>) OR <Locus> : { <TileVariant>: <string>, <TileVariant>:<string>, ... },
                (<string>, <Locus>) OR <Locus> : { <TileVariant>: <string>, <TileVariant>:<string>, ... },
                ...
            },
        'tag-length' : <int>
    }

**Example request body:** ::

    {
        'exon1' : [ hg38', 'chr19', 1, 44905870, 44905924 ],
        'exon2' : [ 'hg38', 'chr19', 1, 44906603, 44906668 ]
    }

**Example response body:** ::

    {
        'tile-positions' : {
            ( 'exon1', ['hg38', 'chr19', 1, 44905870, 44905924 ] ) : [ '0.756.742-744' ],
            ( 'exon2', ['hg38', 'chr19', 1, 44906603, 44906668 ] ) : [ '0.756.745-748' ],
        },
        'tile-variants': {
            ( 'exon1', [ 'hg38', 'chr19', 1, 44905870, 44905924 ] ): {
                '0.756.741.5' : "ctaccgtttaggcggatatcgcgtacggcagctactcaacgcaccggaacttgtgtttgtgtgtgtggtcgcccactacgcacgttatatg",
                '0.756.742.0' : "acggcagtagttttgccgctcggtaaacgtcagaatgtttggagggcggtacggctagagatatcaccctctgctactcaacgcaccggaacttgtgtttgtgtgtgtggtcgcccactacgcacgttatatg",
                '0.756.742.1' : "acggcagtagtnntgccgctcggtaaacgtcagaatgtttggagggcggtacggctagagatatcaccctctgctactcaacgcaccggaacttgtgtttgtgtgnnnntcgcccactacgcacgttatatg",
                ...
                '0.756.743.0' : "gtcgcccactacgcacgttatatgagagagctggcagatgccttatggaagtgactgctaccgtttgttgacac"
            },
            ( 'exon2', [ 'hg38', 'chr19', 1, 44906603, 44906668 ] ): { ... }
        },
        'tag-length' : 24
    }
