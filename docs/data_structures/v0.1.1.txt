Lightning v0.1.1 Data Structures Specifications
================================================

In-depth VCF Data Structures Specifications
--------------------------------------------

VCFInfoField
^^^^^^^^^^^^^^
    JSON-formatted information field format for a VCF or gVCF file. Keys that are
    not defined here may be included. Required keys are:

    * 'ID'
    * 'Number', indicates the number of values that can be included with the
      INFO field. If the field has one value per alternate allele, the value
      should be 'A'. If the field has one value for each possible allele (including
      the reference'), the value should be 'R'. If the field has one value for each
      possible genotype, the value should be 'G'. If the number of possible values
      varies, is unknown, or is unbounded, the value should be '.'.
    * 'Type', options are 'Integer', 'Float', 'Flag', 'Character', and 'String'
    * 'Description'
    * [optional] 'Source'
    * [optional] 'Version'

    If the 'Type' is equal to 'Flag', the INFO field does not contain a Value entry
    and the number should be 0.

::

    {
      'ID': <string>,
      'Number':<int>|'A'|'R'|'G'|'.',
      'Type':<string>,
      'Description':<string>,
      'Source':<string>,
      'Version':<string>
    }

VCFFilterField
^^^^^^^^^^^^^^^^
    JSON-formatted filter field format for a VCF or gVCF file. Keys that are not
    defined here may be included. Required keys are 'ID' and 'Description'.

::

    {
      'ID': <string>,
      'Description':<string>
    }

VCFFormatField
^^^^^^^^^^^^^^^^
    JSON-formatted format field format for a VCF or gVCF file. Used for Genotype
    fields. Keys that are not defined here may be included. Required keys are:

    * 'ID'
    * 'Number', indicates the number of values that can be included with the
      INFO field. If the field has one value per alternate allele, the value
      should be 'A'. If the field has one value for each possible allele (including
      the reference'), the value should be 'R'. If the field has one value for each
      possible genotype, the value should be 'G'. If the number of possible values
      varies, is unknown, or is unbounded, the value should be '.'.
    * 'Type', options are 'Integer', 'Float', 'Character', and 'String'
    * 'Description'

::

    {
      'ID': <string>,
      'Number':<int>|'A'|'R'|'G'|'.',
      'Type':<string>,
      'Description':<string>
    }

VCFAlternativeAlleleField
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    JSON-formatted alternative allele field format for a VCF or gVCF file. Used to
    build symbols for alternate alleles (used for imprecise structural variants).
    Keys that are not defined here may be included. Required keys are 'ID' and
    'Description'. The ID field indicates the type of structural variant and can
    be a colon-separated list of types and subtypes. The ID values are case
    sensitive and may not contain whitespace or angle brackets. The first level
    type must be one of the following:

    * DEL, deletion relative to the reference
    * INS, insertion of novel sequence relative to the reference
    * DUP, region of elevated copy number relative to the reference
    * INV, inversion of reference sequence
    * CNV, copy number variable region (may be both deletion and duplication; should
      not be used when a more specific category may be applied)

    Reserved subtypes include:

    * DUP:TANDEM, tandem duplication
    * DEL:ME, deletion of a mobile element relative to the reference
    * INS:ME, insertion of a mobile element relative to the reference

::

    {
      'ID': <string>,
      'Description':<string>
    }

VCFContigField
^^^^^^^^^^^^^^^^
    JSON-formatted contig field format for a VCF or gVCF file. Keys that are not
    defined here may be included. Required keys are 'ID' and 'Description', and
    'URL'. 'URL' points to the location of the contig.

::

    {
      'ID': <string>,
      'Description':<string>,
      'URL':<string>
    }

VCFSampleField
^^^^^^^^^^^^^^^^
    JSON-formatted sample field format for a VCF or gVCF file. Used to define sample
    to genome mappings. This is the only info given by VCFv4.2. I believe the length
    of 'Genomes', 'Mixture', and 'Description' must be the same.

::

    {
      'ID': <string>,
      'Genomes':[<string>, ...],
      'Mixture':[<string>, ...],
      'Description':[<string>, ...]
    }

VCFMetaData
^^^^^^^^^^^^^

    Representation of a VCF Header. JSON-formatted with keys:
    * 'fileformat', whose value indicates the format of the VCFLine's returned by
    the Lightning server
    * 'fileDate', the current date, format (YYYYMMDD)
    * 'source', the Lightning server producing the VCF MetaData
    * 'reference', the location of the reference fasta file used to generate the
    VCFLines
    * 'assembly', same as 'reference'
    * [optional] 'info', for information field formats
    * [optional] 'filter', for filters that have been applied to the data
    * [optional] 'format', for genotype fields
    * [optional] 'alt', for symbolizing imprecise structural variants
    * [optional] 'contig', for pointing to sequence contigs
    * [optional] 'sample', for defining sample to genome mappings
    * [optional] 'pedigree', for defining relationships between genomes. Can be a
    list of name:genome or a url pointing to a pedigree database

::

    {
      'fileformat':<string>,
      'fileDate':<int>,
      'source':<string>,
      'reference':<string>,
      'assembly':<string>,
      'info': [VCFInfoField_, ...],
      'filter': [VCFFilterField_, ...],
      'format': [VCFFormatField_, ...],
      'alt': [VCFAlternativeAlleleField_, ...],
      'contig': [VCFContigField_, ...],
      'sample': [VCFSampleField_, ...],
      'pedigree': [{<string>:<string>}, ...] OR <string>
    }

    Example:

::

    {
      'fileformat':'VCFv4.2',
      'fileDate':20150921,
      'source':'Lightningv0.1.0',
      'reference':'1adbd1bd00358fe6ff2303ec8f3169ce+83454',
      'assembly':'1adbd1bd00358fe6ff2303ec8f3169ce+83454'
    }

VCFLine
^^^^^^^^^

    Representation of VCF line. The info field maps the IDs from VCFInfoField_'s
    defined in VCFMetaData_. Required keys:

    * chrom: Chromosome. An identifier from the reference genome or an
      angle-bracketed ID String (<ID>) pointing to a contig in the assembly file
      (the file pointed to by 'assembly' in VCFMetaData_). The colon symbol (:)
      must be absent from all chromosome names to avoid parsing errors when dealing
      with breakends.  (String, no white-space permitted).
    * pos: Position. The reference position, 1-indexed. Telomeres are indicated
      by using positions 0 or N+1, where N is the length of the corresponding
      chromosome or contig. (Integer).
    * id: Identifier. List of unique identifiers if available. If there is no
      identifier available, then the list is empty. (List of strings, no white-space
      or semi-colons permitted
    * ref: Reference base(s). Each base must be one of A,C,G,T,N (case insensitive).
      Multiple bases are permitted. The value matching the 'pos' key refers to the
      position of the first base in this string. For simple insertions and deletions
      in which either the 'ref' or one of the 'alt' alleles would otherwise be
      null/empty, the 'ref' and 'alt' values must include the base before the event
      (which must be reflected in the 'pos' field), unless the event occurs at
      position 1 on the contig in which case it must include the base after the
      event; this padding base is not required (although it is permitted) for
      variations such as complex substitutions or other events where all alleles
      have at least one base represented in their strings. If any of the 'alt'
      alleles is a symbolic allele (an angle-bracketed ID String <ID>), then the
      padding base is required and 'pos' denotes the coordinate of the base preceding
      the polymorphism. (String)
    * alt: Alternate base(s). List of alternate non-reference alleles called on
      at least one of the samples. Options are strings made up of the bases
      A,C,G,T,N,*, (case insensitive) or an angle-bracketed ID String (<ID>) or
      a breakend replacement string as described in the VCFv4.2 section on
      breakends. The `*` allele is reserved to indicate that the allele is missing
      due to a upstream deletion.  If there are no alternative alleles, the list
      should be empty. (String; no whitespace, commas, or angle-brackets are
      permitted in the ID String itself).
    * qual: Quality. Phred-scaled quality score for the assertion made in ALT.
      -10*log10(prob[call in alt is wrong]). If alt is empty, then this is
      -10*log10(prob[variant]), otherwise, this is -10*log10(prob[no variant]).
      If this is unknown, return None.
    * filter: Filter status. PASS if this position has passed all filters (if a
      call is made at this position). Otherwise, if the site has not passed all
      filters, a semicolon-separated list of codes for filters that fail.  e.g. `q10;s50` might
      indicate that at this site the quality is below 10 and the number of samples with data is below 50% of the total
      number of samples.  `0` is reserved and should not be used as a filter String.  If filters have not been applied,
      then this field should be set to the missing value.  (String, no white-space or semi-colons permitted)

::

    {
      'chrom':<string>,
      'pos':<int>,
      'id':[<string>, ...],
      'ref':<string>,
      'alt':[<string>, ...],
      'qual':<float>|None,
      'filter':<string>,
      'info':[{<string>:<string>}, ...]
    }


gVCFMetaData
^^^^^^^^^^^^^^
Testing


gVCFHeader
^^^^^^^^^^^^
Testing

gVCFLine
^^^^^^^^^

    Representation of gVCF line as a list.
    List of 2 integers, followed by 2 strings. The
    first integer is the chromosome integer and the second integer is the position.
    The next string is the reference sequence, and the final string is the alternate
    sequence. The reference sequence can be a period. The alternate sequence can
    include commas.

    [<int>, <int>, <string>, <string>, <string>]

    [ #CHROM, POS, ID, REF, ALT, QUAL, FILTER, INFO ]

    [ chromosome, position, identifier, reference bases, alt-sequence ]
