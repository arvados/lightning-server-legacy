Alternate Lightning v0.1.0 API Specifications
==============================================

..
  Useful links I used when designing the API:
  http://stackoverflow.com/questions/1266596/what-is-the-best-way-to-design-a-http-request-when-somewhat-complex-parameters-a
  http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api#requirements

We highly recommend reading :doc:`../data_structures/v0.1.0` before diving into
this API. These API only support well-sequenced tile variants

Lightning Server Namespace
---------------------------

..
  Though tile positions include their tag set integer, they make little intuitive
  sense when compared with tile positions from another tag set. Thus the
  partitioning of the tile library namespace.

  We want to allow a user to iterate over all tile positions and tile variants
  without needing to iterate over the paths

::

  /status : returns the API version running on the server
  /tile-library
    /tag-sets : returns the tag set version information for all versions
                supported by this Lighting server instance.
      /{tag-set-identifier} : given the tag set version identifier, returns
                              information about that tag set.
        /paths : given the tag set version integer, returns the paths in that
                 tag set.
          /{path-int} : given the tag set version identifier and the path integer,
                        returns information about that path.
        /tile-positions : given the tag set version identifier, returns the tile
                          positions in that tag set.
          /{tile-position-id} : given the tag set version identifier and tile
                                position identifier, returns information about
                                that tile position.
            /locus : given the tag set version identifier, tile position identifier,
                     and optional query parameters containing assembly information,
                     returns locus information about the tile position.
        /tile-variants : given a tag set version identifier, returns the tile
                         variants in that tag set in this Lightning server instance.
          /{tile-variant-id} : given the tag set version identifier and tile variant
                               identifier, returns details about the tile variant.
            /locus : given the tag set version identifier, tile variant identifier,
                     and optional query parameters containing assembly information,
                     returns locus information about the tile variant.
            /subsequence: given the tag set version identifier, tile variant
                          identifier, and query parameters containing locus
                          information, returns the subsequence of the tile variant
            /annotations: given the tag set version identifier and tile variant
                          identifier, returns the annotation identifiers applying
                          to that tile variant.
  /annotations : returns a list of annotation identifiers loaded into the Lightning
                 instance.
    /{annotation-id} : given an annotation id, returns the tile variants associated
                       with that annotation.
  /callsets : returns a list of all genome names, termed callsets, loaded into this
              Lightning server instance.
    /{callset-name} : given the callset name, returns details about the callset.
      /gvcf : given the callset name and locus query parameters, returns a list
              of gVCF lines.
      /vcf : given the callset name and locus query parameters, returns a list of
             VCF lines.
      /tile-variants : given the callset name and tile position query parameters,
                       returns the tile variants the callset has at the given tile
                       position.
  /assemblies : returns the available assemblies
    /{assembly-id} : returns the details about the assembly, including a list of
                     loaded loci (valid locations) on the Lightning server instance.
  /searches : returns a list of searches that have been performed
    /{search-id} : returns the specific search and the answer of the search


GET /status
------------
    Request used to obtain the status of the Lightning server instance, which
    currently only includes the API version the server is running. Does not
    require any query parameters.

    **Response body:** ::

        {
          'api-version': <int>.<int>.<int>
        }

    **Example response:** ::

        { 'api-version' : 0.1.0 }

GET /tile-library/tag-sets
----------------------------
    Request used to get the available tag sets on this Lightning instance. Does
    not require any query parameters. Returns a list of tag set unique identifiers
    (portable data hashes of the collection containing the tag set). This collection
    contains information about the tag set and the path dividers.

    **Response body:** ::

        [<string>, ...]

    **Example response:** ::

        ['d87075c41962489cb9ce7d63da1d7841', '047ae54fba97385716acd2c552fae763']

GET /tile-library/tag-sets/{tag-set-identifier}
------------------------------------------------
    Request used to get information about the given tag set identifier. Does not
    require any query parameters.

    **Response body:** ::

        {
          'tag-set-identifier' : <string>,
          'tag-set-integer': <int> (base 16)
        }

    **Example response:** ::

        {
          'tag-set-identifier' : 'd87075c41962489cb9ce7d63da1d7841',
          'tag-set-integer' : 00
        }

GET /tile-library/tag-sets/{tag-set-identifier}/paths
-------------------------------------------------------
    Request used to get the available paths for a specific tag set on this
    Lightning server instance. Tag set is specified using the tag set identifier
    in the uri. Does not require any query parameters. Returns a
    list of path integers (in base 16).

    **Response body:** ::

        [<int>, ...]

    **Example response for a BRCA Lightning Instance:** ::

        [247, 2c5]


GET /tile-library/tag-sets/{tag-set-identifier}/paths/{path-int}
-----------------------------------------------------------------
    Request used to get information about a specific path for a specific tag set
    on this Lightning server instance. Tag set is specified using the tag set
    identifier in the uri. The path is identified using the path integer, written
    in base 16 in the uri. Does not require any query parameters. Returns a
    dictionary with path information for the specified path and tag set.

    **Response body:** ::

        {
            'path' : <int> (base 16),
            'num-positions' : <int> (base 10)
        }

    **Example response:** ::

        {
            'path' : 2c5,
            'num-positions' : 12462
        }

GET /tile-library/tag-sets/{tag-set-identifier}/tile-positions
---------------------------------------------------------------
    Request used to get the available tile positions for a specific tag set on
    this Lightning server instance. Tag set is specified using the tag set identifier
    in the uri. Does not require any query parameters. In the future, might support
    query parameters filtering on information about the tile (like its path).
    Returns a list of tile position identifiers (:ref:`tile-position-data-structure`).

    **Response body:** ::

        [<TilePosition>, ...]

    **Example response for a BRCA Lightning Instance:** ::

        ['00.247.0000', '00.247.0001', ..., '00.247.1bfb', '00.2c5.0000', ..., '00.2c5.30ae']


GET /tile-library/tag-sets/{tag-set-identifier}/tile-positions/{tile-position-id}
----------------------------------------------------------------------------------
    Request used to get information about a specific tile position for a specific
    tag set on this Lightning server instance. The tag set is specified using the
    tag set identifier in the uri. The tile position is identified using the
    :ref:`tile-position-data-structure` in the uri. Does not require any query
    parameters. Returns a dictionary with tile position information for the
    specified tag set and tile position.

    **Response body:** ::

        {
            'tile-position': <TilePosition>,
            'total-tile-variants': <int>, (base 10)
            'well-sequenced-tile-variants': <int>, (base 10)
            'num-genomes': <int> (base 10)
        }

    **Example Response:** ::

        {
            'tile-position': '00.247.0000',
            'total-tile-variants': 25,
            'well-sequenced-tile-variants': 0,
            'num-genomes': 680
        }

GET /tile-library/tag-sets/{tag-set-identifier}/tile-positions/{tile-position-id}/locus
----------------------------------------------------------------------------------------
    Request used to get locus information about a specific tile position for a
    specific tag set on this Lightning server instance. The tag set is specified
    using the tag set identifier in the uri. The tile position is identified using
    the :ref:`tile-position-data-structure` in the uri. Does not require any query
    parameters, but an assembly identifier may be used to get information about a
    specific assembly. Returns a list of :ref:`locus-data-structure`'s. If no
    query parameters are specified, the list returned contains the loci for all
    assemblies in the Lightning server instance.

    **GET Query Parameters:**

        =================  =========  =========
        Parameter name     Type       Notes
        =================  =========  =========
        ``assembly-name``  <string>   Optional
        ``assembly-pdh``   <string>   Optional
        =================  =========  =========

    **Response body:** ::

        [<Locus>, ...]

    **Example Query Parameters:**

        =================  ========================================
        Parameter name     Value
        =================  ========================================
        ``assembly-name``  'hg19'
        ``assembly-pdh``   'dad94936d4144f5e0a289244d8be93e9+5735'
        =================  ========================================

    **Example response body:** ::

        [
          {
            'assembly-name': 'hg19',
            'assembly-pdh': 'dad94936d4144f5e0a289244d8be93e9+5735',
            'chromosome-name': '13',
            'indexing': 0,
            'start-position': 32199976,
            'end-position': 32200225
          }
        ]

GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants
---------------------------------------------------------------
    Request used to get the available tile variants for a specific tag set on
    this Lightning server instance. Tag set is specified using the tag set identifier
    in the uri. Does not require any query parameters. In the future, might support
    query parameters filtering on information about the tile variant (like its path).
    Returns a list of tile variant identifiers (:ref:`tile-variant-data-structure`).

    **Response body:** ::

        [<TileVariant>, ...]

    **Example response for a BRCA Lightning Instance:** ::

        [
          '00.247.0000.830003ac103a97d8f7992e09594ac68e',
          '00.247.0000.455577ff6b0d38188477ee2bfb2f0ea8',
          ...,
          '00.247.1bfb.c95325c08a449529143776e18561db71',
          '00.2c5.0000.1948117b4a56e4ad73d36dce185110fd',
          ...,
          '00.2c5.30ae.bc952f709d7419f7e103daa2b7e469a9'
        ]

GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants/{tile-variant-id}
--------------------------------------------------------------------------------
    Request used to get information about a specific tile variant for a specific
    tag set on this Lightning server instance. The tag set is specified using the
    tag set identifier in the uri. The tile variant is identified using the
    :ref:`tile-variant-data-structure` in the uri. Does not require any query
    parameters. Returns details about the specified
    :ref:`tile-variant-data-structure` as a :ref:`tile-variant-detail-data-structure`.

    **Response body:** ::

        <TileVariantDetail>

    **Example response:** ::

        {
            'tile-variant':'00.2c5.30ae.bc952f709d7419f7e103daa2b7e469a9',
            'tag-length': 24,
            'start-tag': 'gccaaggagttttaaaactactga',
            'end-tag': '',
            'is-start-of-path': False,
            'is-end-of-path': True,
            'sequence' : 'gccaaggagttttaaaactactgatgcccacctcccacacccaaaagtctgattaattgatctagggtatggcctgagcttcaagagtttttaaagcatccaggtgattacaatgtgtagtgaagtttgagagccactgcacaacattaataattgttgggagaaagactgtggctttagctagggagagctgtccagaagatctgaatgtcaggagagagactagtgagagatttggaaaccatcaacatattgatggtaactgaagccacagaagtggacaacactgccttaggagaagatgccaaataacaagagagtagatacaaagacattttgacataacaaagtatggttacagaaatattttcaggtggaaaggaagttgaaggga',
            'md5sum': 'bc952f709d7419f7e103daa2b7e469a9',
            'length': 394,
            'number-of-positions-spanned': 1,
            'population-frequency': 0.5,
            'population-count': 150,
            'population-total': 300
        }

GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants/{tile-variant-id}/locus
--------------------------------------------------------------------------------------
    Request used to get locus information about a specific tile variant for a
    specific tag set on this Lightning server instance. The tag set is specified
    using the tag set identifier in the uri. The tile variant is identified using
    the :ref:`tile-variant-data-structure` in the uri. Does not require any query
    parameters, but an assembly identifier may be used to get information about a
    specific assembly. Returns a list of :ref:`locus-data-structure`'s. If no
    query parameters are specified, the list returned contains the loci for all
    assemblies in the Lightning server instance.

    **GET Query Parameters:**

        =================  =========  =========
        Parameter name     Type       Notes
        =================  =========  =========
        ``assembly-name``  <string>   Optional
        ``assembly-pdh``   <string>   Optional
        =================  =========  =========

    **Response body:** ::

        [<Locus>, ...]

    **Example Query Parameters:**

        =================  ========================================
        Parameter name     Value
        =================  ========================================
        ``assembly-name``  'hg19'
        ``assembly-pdh``   'dad94936d4144f5e0a289244d8be93e9+5735'
        =================  ========================================

    **Example response body:** ::

        [
          {
            'assembly-name': 'hg19',
            'assembly-pdh': 'dad94936d4144f5e0a289244d8be93e9+5735',
            'chromosome-name': '13',
            'indexing': 0,
            'start-position': 32199976,
            'end-position': 32200225
          }
        ]

GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants/{tile-variant-id}/subsequence
--------------------------------------------------------------------------------------------
    Request used to get a subsequence of a specific tile variant for a specific
    tag set on this Lightning server instance. The tag set is specified using the
    tag set identifier in the uri. The tile variant is identified using the
    :ref:`tile-variant-data-structure` in the uri. Query parameters follow the
    :ref:`locus-data-structure` data structure. These query parameters are
    required. The response is a dictionary with one key: ``sequence``.

    If the :ref:`locus-data-structure` provided touches a locus outside of the
    tile variant, the API should return an error.

    **GET Query Parameters:**

        ===================  =========
        Parameter name       Type
        ===================  =========
        ``assembly-name``    <string>
        ``assembly-pdh``     <string>
        ``chromosome-name``  <string>
        ``indexing``         <int>
        ``start-position``   <int>
        ``end-position``     <int>
        ===================  =========

    **Response body:** ::

        {
          'sequence': <string>
        }

    **Example Query Parameters:**

        ===================  ========================================
        Parameter name       Value
        ===================  ========================================
        ``assembly-name``    'hg19'
        ``assembly-pdh``     'dad94936d4144f5e0a289244d8be93e9+5735'
        ``chromosome-name``  '13'
        ``indexing``         0
        ``start-position``   32199976
        ``end-position``     32199983
        ===================  ========================================

    **Example response body:** ::

        {
          'sequence': 'gggtac'
        }

GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants/{tile-variant-id}/annotations
--------------------------------------------------------------------------------------------
    Request used to get the annotations associated with a specific tile variant
    for a specific tag set on this Lightning server instance. The tag set is
    specified using the tag set identifier in the uri. The tile variant is identified
    using the :ref:`tile-variant-data-structure` in the uri. Does not require any
    query parameters. The response is a list of annotation identifiers. If no
    annotation identifiers exist that are associated with that tile variant, returns
    an empty list.

    **Response body:** ::

        [ <string>, <string>, ...]

    **Example response body:** ::

        [ 'annotation1', 'annotation3']

GET /annotiles
----------------
    Request used to get all the annotations loaded into this Lightning server
    instance. Does not require any query parameters.

    **Response body:** ::

        [ 'annotation0', 'annotation1', 'annotation2', 'annotation3']

GET /annotiles/{annotation-id}
-------------------------------
    Request used to determine which tile variants (:ref:`tile-variant-data-structure`)
    are associated with a particular annotation identifier. Does not require any
    query parameters.

    **Response body:** ::

        [<TileVariant>, ...]

    **Example response body:** ::

        ['00.2c5.30ae.bc952f709d7419f7e103daa2b7e469a9']

GET /callsets
--------------
    Request used to determine which callsets (called genomes) are loaded into this
    Lightning server instance. Returns a list of the names of the callsets. These
    names are expected to be identical to the names used in the phenotype database
    the user chooses. Does not require any query parameters.

    **Response body:** ::

        [<string>, <string>, ... ]

    **Example response body:** ::

        ['human1-complete-genomics', 'human1-illumina', 'human2', 'assembly-hg19' ]

POST /callsets
--------------
    Possibly a v0.1.1 functionality.

    Creates a callset (called genomes) in this Lightning server instance. Returns
    an Arvados UUID pointing to the pipeline instance adding the callset. The
    callset will appear on the server once the pipeline finishes successfully.

    **Request body:** ::

        {
          'callset-name': <string>,
          'callset-format': <string>,
          'callset-collection-pdh': <string>
        }

    **Response body:** ::

        <ArvadosUUID>


GET /callsets/{callset-name}
-----------------------------
    Request used to find details about a specific callset. Returns dictionary containing
    details about the callset. Phenotypic details may be passed by querying the phenotype
    database specified by the user, but this phenotype database is not part of
    Lightning.

    **Response body:** ::

        {
            'callset-name' : <string>,
            'callset-locator': <string>
        }

    **Example response body:** ::

        GET /callsets/assembly-hg19
        Response body: {
            'callset-name': 'assembly-hg19',
            'callset-locator': '1cf491c1ea99543da01c5a8f6b8a6dba+228008/hg19'
        }

GET /callsets/{callset-name}/gvcf-header
-----------------------------------------
    Request used to obtain a valid gVCF header. Currently should not change based
    on the callset name specified in the uri. Requires query parameters specifying
    an assembly and an optional parameter specifying the gVCF blocks
    (:ref:`gVCF-block-data-structure`) to use. Responds with dictionary of type
    :ref:`gVCF-metadata-data-structure`.

    **GET Query Parameters:**

        =================    ===============  =========
        Parameter name       Type             Notes
        =================    ===============  =========
        ``assembly-name``    <string>
        ``assembly-pdh``     <string>
        ``gvcf-block``       <list of ints>   Optional
        =================    ===============  =========

    **Response body:** ::

        <gVCFMetaData>

    **Example Query Parameters:**

        ===================  ========================================
        Parameter name       Value
        ===================  ========================================
        ``assembly-name``    'hg19'
        ``assembly-pdh``     'dad94936d4144f5e0a289244d8be93e9+5735'
        ===================  ========================================

    **Example response body:** ::

        {
            'fileformat':'VCFc4.2',
            'fileDate':20150928,
            'source':'Lightningv0.1.0',
            'assembly':'dad94936d4144f5e0a289244d8be93e9+5735/hg19',
            'info': [
              {
                'ID': 'END',
                'Number':1,
                'Type':Integer,
                'Description':'Stop position of the interval'
              }
            ],
            'format': [
              {
                'ID': 'GT',
                'Number':1,
                'Type':'String',
                'Description':'Genotype'
              }
            ],
            'alt': [
              {
                'ID': 'NOT_REF',
                'Description':'Represents any possible alternative allele at this location'
              }
            ],
            'gvcfblock': [0, 2147483647]
        }

GET /callsets/{callset-name}/gvcf
-----------------------------------
    Request used to obtain a list of valid gVCF lines for specified callset in
    the uri. Requires query parameters specifying a :ref:`locus-data-structure`
    to retrieve lines for. The query parameters may include an optional parameter
    to specify the gVCF blocks (:ref:`gVCF-block-data-structure`) to use. Responds
    with a list of dictionaries of type :ref:`gVCF-line-data-structure`. These
    represent the gVCF lines of the specified callset.

    **GET Query Parameters:** ::
        ===================  ===============  =========
        Parameter name       Type             Notes
        ===================  ===============  =========
        ``assembly-name``    <string>
        ``assembly-pdh``     <string>
        ``chromosome-name``  <string>
        ``indexing``         <int>
        ``start-position``   <int>
        ``end-position``     <int>
        ``gvcf-block``       <list of ints>   Optional
        ===================  ===============  =========

    **Response body:** ::

        [<gVCFLine>, ...]

    **Example query parameters:**

        ===================  ========================================
        Parameter name       Value
        ===================  ========================================
        ``assembly-name``    'hg19'
        ``assembly-pdh``     'dad94936d4144f5e0a289244d8be93e9+5735'
        ``chromosome-name``  '13'
        ``indexing``         0
        ``start-position``   32199976
        ``end-position``     32200225
        ===================  ========================================

    **Example response body:** ::

        [
          {
            'chrom':'13',
            'pos':32199977,
            'ref':G,
            'alt':['<NON_REF>'],
            'filter':[],
            'format': [
              {'sample-name':'human1-illumina', 'GT':'0/0'}
            ],
            'info':{'END':[32200122]}
          },
          {
            'chrom':'13',
            'pos':32200123,
            'ref':T,
            'alt':['A','<NON_REF>'],
            'filter':[],
            'format': [
              {'sample-name':'human1-illumina', 'GT':'0/1'}
            ]
          },
          {
            'chrom':'13',
            'pos':32200124,
            'ref':G,
            'alt':['<NON_REF>'],
            'filter':[],
            'format': [
              {'sample-name':'human1-illumina', 'GT':'0/0'}
            ],
            'info':{'END':[32200225]}
          }
        ]

GET /callsets/{callset-name}/vcf-header
-----------------------------------------
    Request used to obtain a valid VCF header. Currently should not change based
    on the callset name specified in the uri. Requires query parameters specifying
    an assembly. Responds with dictionary of type :ref:`VCF-metadata-data-structure`.

    **GET Query Parameters:**

        =================    ===============
        Parameter name       Type
        =================    ===============
        ``assembly-name``    <string>
        ``assembly-pdh``     <string>
        =================    ===============

    **Response body:** ::

        <VCFMetaData>

    **Example Query Parameters:**

        ===================  ========================================
        Parameter name       Value
        ===================  ========================================
        ``assembly-name``    'hg19'
        ``assembly-pdh``     'dad94936d4144f5e0a289244d8be93e9+5735'
        ===================  ========================================

    **Example response body:** ::

        {
            'fileformat':'VCFc4.2',
            'fileDate':20150928,
            'source':'Lightningv0.1.0',
            'assembly':'dad94936d4144f5e0a289244d8be93e9+5735/hg19',
            'format': [
              {
                'ID': 'GT',
                'Number':1,
                'Type':'String',
                'Description':'Genotype'
              }
            ]
        }

GET /callsets/{callset-name}/vcf
-----------------------------------
    Request used to obtain a list of valid VCF lines for specified callset in
    the uri. Requires query parameters specifying a :ref:`locus-data-structure`
    to retrieve lines for. Responds with a list of dictionaries of type
    :ref:`gVCF-line-data-structure`. These represent the VCF lines of the specified
    callset.

    **GET Query Parameters:** ::
        ===================  ===============
        Parameter name       Type
        ===================  ===============
        ``assembly-name``    <string>
        ``assembly-pdh``     <string>
        ``chromosome-name``  <string>
        ``indexing``         <int>
        ``start-position``   <int>
        ``end-position``     <int>
        ===================  ===============

    **Response body:** ::

        [<VCFLine>, ...]

    **Example query parameters:**

        ===================  ========================================
        Parameter name       Value
        ===================  ========================================
        ``assembly-name``    'hg19'
        ``assembly-pdh``     'dad94936d4144f5e0a289244d8be93e9+5735'
        ``chromosome-name``  '13'
        ``indexing``         0
        ``start-position``   32199976
        ``end-position``     32200225
        ===================  ========================================


    **Example response body:** ::

        [
          {
            'chrom':'13',
            'pos':32200123,
            'ref':T,
            'alt':['A'],
            'filter':[],
            'format': [
              {'sample-name':'human1-illumina', 'GT':'0/1'}
            ]
          }
        ]

GET /callsets/{callset-name}/tile-variants
-------------------------------------------
    Request used to obtain a list of tile variants for each phase for the callset
    specified in the uri. A list of :ref:`tile-position-data-structure` or
    :ref:`tile-position-range-data-structure` may be specified using optional
    query parameters. If no query parameters are specified, all tile variants are
    returned. Responds with a dictionary with two keys: ``callset-name`` and
    ``tile-variants``. The value associated with tile variants is a list of lists.
    Each list represents a phase and contains objects of type
    :ref:`tile-variant-data-structure`. Tile variants are returned if they intersect
    at with the given positions, even if they span outside the tile positions given.

    **GET Query Parameters:** ::
        ===================  ==========================================  =========
        Parameter name       Type                                        Notes
        ===================  ==========================================  =========
        ``tile-positions``   [<TilePosition>|<TilePositionRange>, ...]   Optional
        ===================  ==========================================  =========

    **Response body:** ::

        {
            'callset-name':<string>,
            'tile-variants': [
                [ <TileVariant>, ...],
                [ <TileVariant>, ...],
                ...
            ]
        }

    **Example query parameters:**

        ===================  ======================
        Parameter name       Type
        ===================  ======================
        ``tile-positions``   ['00.247.0000-0003']
        ===================  ======================

    **Example response body:** ::

        {
            'callset-name':'human1-illumina',
            'tile-variants': [
                [
                  '00.247.0000.830003ac103a97d8f7992e09594ac68e',
                  '00.247.0001.a31fd29383d072a5ccf7027ec37df093',
                  '00.247.0002.a42a3e835440e21dda2cfd65162e85f0'
                ],
                [
                  '00.247.0000.455577ff6b0d38188477ee2bfb2f0ea8',
                  '00.247.0001.30c792a4fc1f0bd88dcc10907e6f27e6'
                ],
            ]
        }

GET /assemblies
-----------------
    Request used to obtain a list of assemblies (:ref:`assembly-data-structure`)
    available in this Lightning server instance. Does not require any query
    parameters.

    **Response body:** ::

        [ <Assembly>, ...]

    **Example response body:** ::

        [
            {
              'assembly-name': 'hg19',
              'assembly-pdh': 'dad94936d4144f5e0a289244d8be93e9+5735'
            },
            {
              'assembly-name': 'GRCh38',
              'assembly-pdh': '047ae54fba97385716acd2c552fae763+5735'
            }
        ]

GET /assemblies/{assembly-id}
-------------------------------
    Request used to obtain details about a specified assembly, given by the portable
    data hash in the uri, available in this Lightning server instance. Does not
    require any query parameters. Details are returned using a list of
    :ref:`locus-data-structure`'s.

    **Response body:** ::

        [ <Locus>, ...]

    **Example response body:** ::

        [
            {
              'assembly-name': 'hg19',
              'assembly-pdh': 'dad94936d4144f5e0a289244d8be93e9+5735',
              'chromosome-name': '13',
              'indexing': 0,
              'start-position': 32199976,
              'end-position': 34000000
            },
            {
              'assembly-name': 'hg19',
              'assembly-pdh': 'dad94936d4144f5e0a289244d8be93e9+5735',
              'chromosome-name': '17',
              'indexing': 0,
              'start-position': 40899976,
              'end-position': 44900000
            },
        ]

GET /searches/help
----------------------
    Returns the filters this Lightning server instance supports and the options
    available for each filter. If the filter 'tile-variants' is available, options
    will be an empty list for that filter, since those may be obtained by
    ``GET /tile-library/tag-sets/{tag-set-identifier}/tile-variants``. However,
    the key 'tile-variants' is included for completeness. The filter 'callsets' is
    treated identically: options will be an empty list for that filter, the key is
    included for completeness, and the options for 'callsets' may be obtained by
    ``GET /callsets``. Does not require any query parameters. Details are returned
    in a dictionary with the keys matching the available filters. The values
    matching these keys are the available options for those filters.

    **Response body:** ::

        {
            <string> : [ <string>, <string>, ... ],
            <string> : [ <string>, <string>, ... ],
            ...
        }

    **Example response body:** ::

        {
            'tile-variants' : [ ],
            'callsets': [ ],
            'phasing': ['any-phase', 'all-phases']
        }

GET /searches
----------------------
    Returns the searches that have been performed on this Lightning server instance.
    Does not require any query parameters. Details are returned as a list of
    pipeline uuids (:ref:`arvados-uuid-data-structure`).

    **Response body:** ::

        [<ArvadosUUID>, ... ]

    **Example response body:** ::

        ['su92l-d1hrv-lcrzu0qrs1iiu03', 'su92l-d1hrv-vg62va2y75c5wxm']

GET /searches/{search-id}
--------------------------
    Returns the details about the search, given by the Arvados UUID
    (:ref:`arvados-uuid-data-structure`) in the uri, that has been performed on
    this Lightning server instance. Does not require any query parameters.
    Details are returned as a dictionary. The value associated with 'response'
    will be None if the pipeline is still running or failed.

    **Response body:** ::

        {
          'search-id': <ArvadosUUID>,
          'parameters': {
            <string>:[<string>],
            ...
          },
          'response': None | [<string>, ...]
        }

    **Example response body:** ::

        {
          'search-id': 'su92l-d1hrv-lcrzu0qrs1iiu03',
          'filters': {
              'tile-variants': [['00.247.0000.830003ac103a97d8f7992e09594ac68e']],
              'phasing': ['any-phase']
          },
          'response': ['human1-complete-genomics', 'human1-illumina', 'assembly-hg19']
        }

POST /searches
----------------------------------------
    Creates a search with the specified parameters. The parameters should be
    available in the response ``GET /searches/help``. If the parameter 'tile-variants'
    is used, the value associated with that key should be of type
    (:ref:`tile-variant-logic-data-structure`). Returns the pipeline uuid
    (format :ref:`arvados-uuid-data-structure`) of that search. The output of that pipeline
    will be a list of callsets matching the search.

    **Request body:** ::

        {
            <string> :  [ <string>, <string>, ...],
            ...
        }

    **Response body:** ::

        <ArvadosUUID>

    **Example request body:** ::

        {
          'tile-variants': [['00.247.0000.830003ac103a97d8f7992e09594ac68e']],
          'phasing': ['any-phase']
        }

    **Example response body:** ::

        'su92l-d1hrv-lcrzu0qrs1iiu03'
