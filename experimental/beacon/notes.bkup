_varannotation describes a quality of the TileVariant (a SNP, INDEL, db_xref associated with that sequence)

 id | tile_variant_id | annotation_type |       source       |                                                  annotation_text                                                   | phenotype |  created   | last_modified 
----+-----------------+-----------------+--------------------+--------------------------------------------------------------------------------------------------------------------+-----------+------------+---------------
  1 |  31061203484673 | DATABASE        | library_generation | alleles A;db_xref dbsnp.120:rs11401994 dbsnp.130:rs66548127 dbsnp.130:rs71972785 dbsnp.120:rs11375550;ref_allele - |           | 2014-09-15 | 2014-09-15



_tile defines the position (path, version, step) of a tile

  tilename  |        start_tag         |         end_tag          |  created   
------------+--------------------------+--------------------------+------------
 7583301632 | ........................ | GTGACAGTAAGATCCAATTCCGCC | 2014-09-15
 7583301633 | GTGACAGTAAGATCCAATTCCGCC | ACCCAAACCATCCCCGAGGGGGCC | 2014-09-15




_tilelocusannotation the translation mechanism between Tile positions and other assemblies

 id | assembly | chromosome | begin_int |  end_int  | chromosome_name |  tile_id   
----+----------+------------+-----------+-----------+-----------------+------------
  1 |       19 |          9 | 135899976 | 135900225 |                 | 7583301632
  2 |       19 |          9 | 135900201 | 135900450 |                 | 7583301633

7777




_tilevariant  defines a possible tile at the position of its parent Tile

 tile_variant_name |  tile_id   | length | population_size |              md5sum              | last_modified |                                                                                                                         sequence                                                                                                                          | start_tag | end_tag 
-------------------+------------+--------+-----------------+----------------------------------+---------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------
    31061203484672 | 7583301632 |    225 |               0 | 7eedf0f11787c1b70ab3b4208d704472 | 2014-09-15    | CCGTCTCAAAAAGAAAAAGAAAAAaaaaagaaaatgttatgacccaaaaataaattctggaaatgctctggaaattcaaggactccctgatctgtattcatctcctaaggtgactgtgagaaatcgccacacactgggtgactgaaaacacaacacaaatgtgattttcagagttctggaggccagcagtccggtagcaagGTGACAGTAAGATCCAATTCCGCC                         |           | 
    31061203488768 | 7583301633 |    249 |               6 | 5d2259d58a3a46cee21ff900d4d5de4f | 2014-09-15    | GTGACAGTAAGATCCAATTCCGCCcccccccccgactcacgtcacaggaaattaaacatttaagctgaaaaaatgttcaaaccaagcagggcagtgcccatgcacagaagtgaggcccaacgggcgaagcggactcatcctccctcctcatgccaacagcagctcaaagcttctcaatggcaaaacttctaccaggtcctgtctaaggccaagattcctcctaaaACCCAAACCATCCCCGAGGGGGCC |           | 

tile id is the 
INTEGER of the 9 digit hex id for position


7583301633  = 1C4000001
31061203488768 = 1C4 (path) 00 (path version) 0001 (Step) 000 (Var num)
..D...D....D.-..D....E...-.D....D...DD

31061203488836 would be a D 1C4000001044


hrmmmmmkayyyyyyyyyyy
OKAY! Find tile position given coordinate. in locusannotation.
start by dividing by 250 to guess approximate position (seems chronological) then search by halves?
nah don't optimize for now. 

so if number is between begin and end int, then we are happy! where the number should be greater than 135899976 apparently.
maxium
137399755 | 137400024 
let's assume valid queries for now.

so we find the tile position based on this (tile_id). 1C4001651 is the location in hex, 651 = 1617 uhmmm the genomes are a lot longer than that...


okay maybe work the other way.
1c4.00.0000.001 -> 31061203484673
1c4.00.0000 -> 7583301632
uhmmmmmmmmmmmmmmmmmm then what? hmmmmmmmmm

if this is the tile variant, can I find where it is used in the ABV file?


okayyyy~~~ so in the meantime let's just assume that we have some sort of mapping.

===============================




select * from loadgenomes_tilelocusannotation where 135900210 > begin_int and 135900210 < end_int;

Okay, so we get the tile_id from that (tile position) and then ... go back to ABV file. Say that it is the 1000th character.
Okay, so say we found an 0 at that position. lookup tile variant... lookup the tiles with that tile_id and then 

 select tile_id, count(*) from loadgenomes_tilelocusannotation group by tile_id having count(*)>1;


WAT. why are there no duplicates.
OH
I'm looking in the wrong database. herp derp.
select tile_id, count(*) from loadgenomes_tilevariant group by tile_id having count(*)>1
  tile_id   | count 
------------+-------
 7583302456 |     4
 7583303854 |     2
 7583304470 |     2
 7583302054 |     2

path --> indiced by spaces
step --> tells you number of characters in it is. hurray!

whoo okay.


select * from loadgenomes_tilevariant where tile_id = 7583302456;
gives 4 results.
    31061206859779 | 7583302456 |    249 |  
    31061206859778 | 7583302456 |    249 |   

whoo!
select * from loadgenomes_tilevariant where tile_variant_name = 31061203484672;
then go into that, get the sequence, and then you have the allele! yay!





http://initd.org/psycopg/docs/usage.html#query-parameters

http://zetcode.com/db/postgresqlpythontutorial/ cur.fetchone()


SO I GET
SELECT * FROM loadgenomes_tilelocusannotation WHERE %s > begin_int AND %s < end_int LIMIT 1

[(u'id', 1), (u'assembly', 19), (u'chromosome', 9), (u'begin_int', 135899976), (u'end_int', 135900225), (u'chromosome_name', u''), (u'tile_id', 7583301632L)] 


http://docs.sqlalchemy.org/en/latest/core/connections.html
http://docs.sqlalchemy.org/en/latest/core/connections.html#sqlalchemy.engine.ResultProxy

int(hexString, 16)
>>> int("a", 16)
10
>>> int("0xa",16)
10

========
31061203488768 = 1C4 (path) 00 (path version) 0001 (Step) 000 (Var num)

grep -Eo '[0-9]{1,4}' hu0A4518.abv 
http://askubuntu.com/questions/184204/how-do-i-fetch-only-the-numbers-in-grep"
You can use grep -E to access the extended regular expression syntax( Same as egrep)
Here "-o" is used to only output the matching segment of the line, rather than the full contents of the line.

The squiggly brackets (e.g. { and }) indicate the number of instances of the match. {1,4} requires that the previous character or character class must occur at least once, but no more than four times.
"

===
DUMB WAY:
so I can run a regular expression search for \s(pathnum) and then pull everything out until the next \s(pathnum+1)

#pattern = re.compile('\s[0-9].*\s')



stackoverflow.com/questions/3122514/python-os-listdir-alternative-certain-extensions

135900210



=====
tail -c 1024 ./abv/hu0A4518.abv > abvlastchars.txt 
head -c 1024 ./abv/hu0A4518.abv > 
=====

http://stackoverflow.com/questions/3303213/pythonic-way-to-turn-a-list-of-strings-into-a-dictionary-with-the-odd-indexed-st

 dict(zip(d[::2], d[1::2]))

. is the zero variant
- is no read
0 is first tile variant

D is variant number 1
# spilled over (so just lost)



135901256

5 to 10
7th char 
7-(5-1) = 3

is ... D
ASDFASDFSADF

vs 
ASDFSA is 5th to 10th

nrw@nrw-PC:~/projects/lightning/experimental/pylightweb/lightning$ python manage.py runserver

135901033 on the hu0A4518



TODO
multiple allele search

SNP SUB INDEL
INDELs, subs?


========================

also error and bounds checking u___u sad sad sad
Okay, so now to deal with multiple allele searches, then to deal with insertions and deletions.
also fix -- should search across whole genome.




